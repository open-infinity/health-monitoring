diff --git a/src/collectd.conf.pod b/src/collectd.conf.pod
index 432efb8..ca1fa38 100644
--- a/src/collectd.conf.pod
+++ b/src/collectd.conf.pod
@@ -1511,6 +1511,20 @@ Enable this option if inodes are a scarce resource for you, usually because
 many small files are stored on the disk. This is a usual scenario for mail
 transfer agents and web caches.
 
+=item B<ValuesAbsolute> B<true>|B<false>
+
+Enables or disables reporting of free, used and used disk space in 1K-blocks. 
+Defaults to true.
+
+=item B<ValuesPercentage> B<true>|B<false>
+
+Enables or disables reporting of free, used and used disk space in percentage.
+Defaults to false.
+
+This is useful for deploying collectd on the cloud, where machines with
+different disk size may exist. Then it is more practical to configure thresholds
+based on relative disk size.
+
 =back
 
 =head2 Plugin C<disk>
diff --git a/src/df.c b/src/df.c
index ded374b..0b22308 100644
--- a/src/df.c
+++ b/src/df.c
@@ -54,7 +54,9 @@ static const char *config_keys[] =
 	"IgnoreSelected",
 	"ReportByDevice",
 	"ReportReserved",
-	"ReportInodes"
+	"ReportInodes",
+	"ValuesAbsolute",
+	"ValuesPercentage"
 };
 static int config_keys_num = STATIC_ARRAY_SIZE (config_keys);
 
@@ -64,6 +66,8 @@ static ignorelist_t *il_fstype = NULL;
 
 static _Bool by_device = 0;
 static _Bool report_inodes = 0;
+static _Bool values_absolute = 1;
+static _Bool values_percentage = 0;
 
 static int df_init (void)
 {
@@ -131,7 +135,24 @@ static int df_config (const char *key, const char *value)
 
 		return (0);
 	}
+	else if (strcasecmp (key, "ValuesAbsolute") == 0)
+	{
+		if (IS_TRUE (value))
+			values_absolute = 1;
+		else
+			values_absolute = 0;
 
+		return (0);
+	}
+	else if (strcasecmp (key, "ValuesPercentage") == 0)
+	{
+		if (IS_TRUE (value))
+			values_percentage = 1;
+		else
+			values_percentage = 0;
+
+		return (0);
+	}
 
 	return (-1);
 }
@@ -274,13 +295,30 @@ static int df_read (void)
 		blk_reserved = (uint64_t) (statbuf.f_bfree - statbuf.f_bavail);
 		blk_used     = (uint64_t) (statbuf.f_blocks - statbuf.f_bfree);
 
-		df_submit_one (disk_name, "df_complex", "free",
+		if (values_absolute)
+		{
+			df_submit_one (disk_name, "df_complex", "free",
 				(gauge_t) (blk_free * blocksize));
-		df_submit_one (disk_name, "df_complex", "reserved",
+			df_submit_one (disk_name, "df_complex", "reserved",
 				(gauge_t) (blk_reserved * blocksize));
-		df_submit_one (disk_name, "df_complex", "used",
+			df_submit_one (disk_name, "df_complex", "used",
 				(gauge_t) (blk_used * blocksize));
-
+		}
+		
+		if (values_percentage)
+		{
+			if (statbuf.f_blocks > 0) 
+				{
+				df_submit_one (disk_name, "df_complex_pct", "free", 
+					(gauge_t) ((float_t)(blk_free) / statbuf.f_blocks * 100));
+				df_submit_one (disk_name, "df_complex_pct", "reserved", 
+					(gauge_t) ((float_t)(blk_reserved) / statbuf.f_blocks * 100));
+				df_submit_one (disk_name, "df_complex_pct", "used", 
+					(gauge_t) ((float_t)(blk_used) / statbuf.f_blocks * 100));
+				}
+			else return (-1);
+		}
+		
 		/* inode handling */
 		if (report_inodes)
 		{
@@ -293,17 +331,33 @@ static int df_read (void)
 				statbuf.f_ffree = statbuf.f_favail;
 			if (statbuf.f_files < statbuf.f_ffree)
 				statbuf.f_files = statbuf.f_ffree;
-
+				
 			inode_free = (uint64_t) statbuf.f_favail;
 			inode_reserved = (uint64_t) (statbuf.f_ffree - statbuf.f_favail);
 			inode_used = (uint64_t) (statbuf.f_files - statbuf.f_ffree);
-			
-			df_submit_one (disk_name, "df_inodes", "free",
-					(gauge_t) inode_free);
-			df_submit_one (disk_name, "df_inodes", "reserved",
-					(gauge_t) inode_reserved);
-			df_submit_one (disk_name, "df_inodes", "used",
-					(gauge_t) inode_used);
+
+			if (values_percentage)
+			{
+				if (statbuf.f_files > 0) 
+				{
+					df_submit_one (disk_name, "df_inodes_pct", "free", 
+						(gauge_t) ((float_t)(inode_free) / statbuf.f_files * 100));
+					df_submit_one (disk_name, "df_inodes_pct", "reserved", 
+						(gauge_t) ((float_t)(inode_reserved) / statbuf.f_files * 100));
+					df_submit_one (disk_name, "df_inodes_pct", "used", 
+						(gauge_t) ((float_t)(inode_used) / statbuf.f_files * 100));
+				}
+				else return (-1);
+			}
+			if (values_absolute) 
+			{
+				df_submit_one (disk_name, "df_inodes", "free",
+						(gauge_t) inode_free);
+				df_submit_one (disk_name, "df_inodes", "reserved",
+						(gauge_t) inode_reserved);
+				df_submit_one (disk_name, "df_inodes", "used",
+						(gauge_t) inode_used);
+			}
 		}
 	}
 
diff --git a/src/types.db b/src/types.db
index 950f6b0..05b0e45 100644
--- a/src/types.db
+++ b/src/types.db
@@ -30,6 +30,8 @@ delay			value:GAUGE:-1000000:1000000
 derive			value:DERIVE:0:U
 df_complex		value:GAUGE:0:U
 df_inodes		value:GAUGE:0:U
+df_complex_pct		value:GAUGE:0:100.1
+df_inodes_pct		value:GAUGE:0:100.1
 df			used:GAUGE:0:1125899906842623, free:GAUGE:0:1125899906842623
 disk_latency		read:GAUGE:0:U, write:GAUGE:0:U
 disk_merged		read:DERIVE:0:U, write:DERIVE:0:U
