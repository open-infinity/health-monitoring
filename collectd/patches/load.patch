diff --git a/src/collectd.conf.in b/src/collectd.conf.in
index 4a88e66..cb69b32 100644
--- a/src/collectd.conf.in
+++ b/src/collectd.conf.in
@@ -469,6 +469,11 @@
 #	InterfaceFormat name
 #</Plugin>
 
+#<Plugin load>
+#	ReportAbsoluteLoad	true
+#	ReportRelativeLoad	false
+#</Plugin>
+
 #<Plugin lpar>
 #	CpuPoolStats   false
 #	ReportBySerial false
diff --git a/src/collectd.conf.pod b/src/collectd.conf.pod
index ca1fa38..fba8bf8 100644
--- a/src/collectd.conf.pod
+++ b/src/collectd.conf.pod
@@ -2109,6 +2109,30 @@ interface path might change between reboots of a guest or across migrations.
 
 =back
 
+=head2 Plugin C<load>
+
+The I<Load plugin> collects the system load. These numbers give a rough overview 
+over the utilization of a machine. The system load is defined as the number of 
+runnable tasks in the run-queue and is provided by many operating systems as a 
+one, five or fifteen minute average.
+
+The following configuration options are available:
+
+=over 4
+
+=item B<ReportAbsoluteLoad> B<false>|B<true>
+
+When enabled, system load is reported for intervals 1 min, 5 min
+and 15 min.
+Defaults to true.
+
+=item B<ReportRelativeLoad> B<false>|B<true>
+
+When enabled, system load divided by number of available CPU cores is reported 
+for intervals 1 min, 5 min and 15 min. Defaults to false.
+
+=back
+
 =head2 Plugin C<logfile>
 
 =over 4
diff --git a/src/load.c b/src/load.c
index 0188da7..887490a 100644
--- a/src/load.c
+++ b/src/load.c
@@ -2,6 +2,7 @@
  * collectd - src/load.c
  * Copyright (C) 2005-2008  Florian octo Forster
  * Copyright (C) 2009       Manuel Sanmartin
+ * Copyright (C) 2013       Vedran Bartonicek
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the
@@ -19,6 +20,7 @@
  * Authors:
  *   Florian octo Forster <octo at verplant.org>
  *   Manuel Sanmartin
+ *   Vedran Bartonicek <vbartoni at gmail.com>
  **/
 
 #define _BSD_SOURCE
@@ -26,6 +28,9 @@
 #include "collectd.h"
 #include "common.h"
 #include "plugin.h"
+#include "utils_ignorelist.h"
+
+#include <unistd.h>
 
 #ifdef HAVE_SYS_LOADAVG_H
 #include <sys/loadavg.h>
@@ -49,7 +54,54 @@
 # include <libperfstat.h>
 #endif /* HAVE_PERFSTAT */
 
-static void load_submit (gauge_t snum, gauge_t mnum, gauge_t lnum)
+static const char *config_keys[] =
+{
+	"ReportAbsoluteLoad",
+	"ReportRelativeLoad"
+};
+static int config_keys_num = STATIC_ARRAY_SIZE (config_keys);
+
+static ignorelist_t *il_absolute = NULL;
+static ignorelist_t *il_relative = NULL;
+
+static _Bool report_absolute_load = 1;
+static _Bool report_relative_load = 0;
+
+static int load_init (void)
+{
+	if (il_absolute == NULL)
+		il_absolute = ignorelist_create (1);
+	if (il_relative == NULL)
+		il_relative = ignorelist_create (1);
+
+	return (0);
+}
+
+static int load_config (const char *key, const char *value)
+{
+	load_init ();
+	
+	if (strcasecmp (key, "ReportAbsoluteLoad") == 0)
+		report_absolute_load = IS_TRUE (value) ? 1 : 0;
+	
+	else if (strcasecmp (key, "ReportRelativeLoad") == 0)
+		report_relative_load = IS_TRUE (value) ? 1 : 0;
+
+	return (-1);
+
+}
+static int cpu_cores()
+{
+	int cores =  sysconf(_SC_NPROCESSORS_ONLN);
+	if (cores < 1){
+		char errbuf[1024];
+		 WARNING ("load: sysconf failed : %s",
+				sstrerror (errno, errbuf, sizeof (errbuf)));
+	}
+	return cores;
+}
+
+static void load_submit (gauge_t snum, gauge_t mnum, gauge_t lnum, char* type)
 {
 	value_t values[3];
 	value_list_t vl = VALUE_LIST_INIT;
@@ -62,28 +114,36 @@ static void load_submit (gauge_t snum, gauge_t mnum, gauge_t lnum)
 	vl.values_len = STATIC_ARRAY_SIZE (values);
 	sstrncpy (vl.host, hostname_g, sizeof (vl.host));
 	sstrncpy (vl.plugin, "load", sizeof (vl.plugin));
-	sstrncpy (vl.type, "load", sizeof (vl.type));
+	sstrncpy (vl.type, type, sizeof (vl.type));
 
 	plugin_dispatch_values (&vl);
 }
 
 static int load_read (void)
 {
+    gauge_t snum = 0;
+    gauge_t mnum = 0;
+    gauge_t lnum = 0;
+    int cores = cpu_cores();
+    
 #if defined(HAVE_GETLOADAVG)
 	double load[3];
 
-	if (getloadavg (load, 3) == 3)
-		load_submit (load[LOADAVG_1MIN], load[LOADAVG_5MIN], load[LOADAVG_15MIN]);
-	else
+	if (getloadavg (load, 3) != 3)
 	{
 		char errbuf[1024];
 		WARNING ("load: getloadavg failed: %s",
 				sstrerror (errno, errbuf, sizeof (errbuf)));
 	}
+	else
+	{
+		snum = load[LOADAVG_1MIN];
+		mnum = load[LOADAVG_5MIN];
+		lnum = load[LOADAVG_15MIN];
+	}
 /* #endif HAVE_GETLOADAVG */
 
 #elif defined(KERNEL_LINUX)
-	gauge_t snum, mnum, lnum;
 	FILE *loadavg;
 	char buffer[16];
 
@@ -95,6 +155,7 @@ static int load_read (void)
 		char errbuf[1024];
 		WARNING ("load: fopen: %s",
 				sstrerror (errno, errbuf, sizeof (errbuf)));
+		fclose (loadavg);
 		return (-1);
 	}
 
@@ -123,11 +184,9 @@ static int load_read (void)
 	mnum = atof (fields[1]);
 	lnum = atof (fields[2]);
 
-	load_submit (snum, mnum, lnum);
 /* #endif KERNEL_LINUX */
 
 #elif HAVE_LIBSTATGRAB
-	gauge_t snum, mnum, lnum;
 	sg_load_stats *ls;
 
 	if ((ls = sg_get_load_stats ()) == NULL)
@@ -137,11 +196,9 @@ static int load_read (void)
 	mnum = ls->min5;
 	lnum = ls->min15;
 
-	load_submit (snum, mnum, lnum);
 /* #endif HAVE_LIBSTATGRAB */
 
 #elif HAVE_PERFSTAT
-	gauge_t snum, mnum, lnum;
 	perfstat_cpu_total_t cputotal;
 
 	if (perfstat_cpu_total(NULL,  &cputotal, sizeof(perfstat_cpu_total_t), 1) < 0)
@@ -156,17 +213,20 @@ static int load_read (void)
 	mnum = (float)cputotal.loadavg[1]/(float)(1<<SBITS);
 	lnum = (float)cputotal.loadavg[2]/(float)(1<<SBITS);
 
-	load_submit (snum, mnum, lnum);
 /* #endif HAVE_PERFSTAT */
-
 #else
 # error "No applicable input method."
 #endif
+	if (report_absolute_load)
+		load_submit(snum, mnum, lnum, "load");
+	if (report_relative_load && cores > 0) 
+		load_submit(snum/cores, mnum/cores, lnum/cores, "load_relative");
 
 	return (0);
 }
 
 void module_register (void)
 {
+	plugin_register_config ("load", load_config, config_keys, config_keys_num);
 	plugin_register_read ("load", load_read);
 } /* void module_register */
diff --git a/src/types.db b/src/types.db
index 950f6b0..054e8a5 100644
--- a/src/types.db
+++ b/src/types.db
@@ -90,6 +90,7 @@ irq			value:DERIVE:0:U
 latency			value:GAUGE:0:65535
 links			value:GAUGE:0:U
 load			shortterm:GAUGE:0:100, midterm:GAUGE:0:100, longterm:GAUGE:0:100
+load_relative		shortterm:GAUGE:0:100, midterm:GAUGE:0:100, longterm:GAUGE:0:100
 md_disks		value:GAUGE:0:U
 memcached_command	value:DERIVE:0:U
 memcached_connections	value:GAUGE:0:U
